{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/ijaycyndy/Data-Cleaning-Using-SQL/blob/main/Revenu%20Forcast%20(Julu%20Updated)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "jZtmDWVmFGa9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 642
        },
        "outputId": "a412cbc4-5e30-4694-8bce-61832a8ff0bf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-1-2536080359.py:48: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df[\"is_clawback\"] = df[\"amount_paid\"] < 0\n",
            "/tmp/ipython-input-1-2536080359.py:50: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df[\"contract_status\"] = np.where(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  supplier      mpan_mprn contract_end_date  amount_paid  \\\n",
              "0          Pozitive Energy        1848605        2024-02-05        25.58   \n",
              "1          Pozitive Energy        1848605        2024-02-05        30.13   \n",
              "2          Pozitive Energy        1848605        2024-02-05        24.07   \n",
              "3          Pozitive Energy        1848605        2024-02-05        88.14   \n",
              "4          Pozitive Energy        1848605        2024-02-05        18.01   \n",
              "...                    ...            ...               ...          ...   \n",
              "30928                  SSE  2900000000000        2025-05-31         1.98   \n",
              "30929                  SSE  2900000000000        2025-05-31         2.35   \n",
              "30930                  SSE  2900000000000        2025-05-31         7.01   \n",
              "30931                  SSE  2900000000000        2025-05-31        12.21   \n",
              "30932  Crown Gas and Power  3200000000000        2025-05-31        13.92   \n",
              "\n",
              "      payment_month Payment_Type payment_month_raw  is_clawback  \\\n",
              "0        2024-01-01    Recurring        2024-01-01        False   \n",
              "1        2024-02-01    Recurring        2024-02-01        False   \n",
              "2        2024-02-01    Recurring        2024-02-01        False   \n",
              "3        2023-04-01    Recurring        2023-04-01        False   \n",
              "4        2024-04-01    Recurring        2024-04-01        False   \n",
              "...             ...          ...               ...          ...   \n",
              "30928    2024-04-01    Recurring        2024-04-01        False   \n",
              "30929    2024-04-01    Recurring        2024-04-01        False   \n",
              "30930    2024-04-01    Recurring        2024-04-01        False   \n",
              "30931    2024-04-01    Recurring        2024-04-01        False   \n",
              "30932    2025-07-01    Recurring        2025-07-01        False   \n",
              "\n",
              "      contract_status  \n",
              "0            inactive  \n",
              "1            inactive  \n",
              "2            inactive  \n",
              "3            inactive  \n",
              "4            inactive  \n",
              "...               ...  \n",
              "30928        inactive  \n",
              "30929        inactive  \n",
              "30930        inactive  \n",
              "30931        inactive  \n",
              "30932        inactive  \n",
              "\n",
              "[28446 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f6ab6414-d417-4469-847b-c3a5a4b9377e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>supplier</th>\n",
              "      <th>mpan_mprn</th>\n",
              "      <th>contract_end_date</th>\n",
              "      <th>amount_paid</th>\n",
              "      <th>payment_month</th>\n",
              "      <th>Payment_Type</th>\n",
              "      <th>payment_month_raw</th>\n",
              "      <th>is_clawback</th>\n",
              "      <th>contract_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>25.58</td>\n",
              "      <td>2024-01-01</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2024-01-01</td>\n",
              "      <td>False</td>\n",
              "      <td>inactive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>30.13</td>\n",
              "      <td>2024-02-01</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2024-02-01</td>\n",
              "      <td>False</td>\n",
              "      <td>inactive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>24.07</td>\n",
              "      <td>2024-02-01</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2024-02-01</td>\n",
              "      <td>False</td>\n",
              "      <td>inactive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>88.14</td>\n",
              "      <td>2023-04-01</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2023-04-01</td>\n",
              "      <td>False</td>\n",
              "      <td>inactive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>18.01</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>False</td>\n",
              "      <td>inactive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30928</th>\n",
              "      <td>SSE</td>\n",
              "      <td>2900000000000</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>1.98</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>False</td>\n",
              "      <td>inactive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30929</th>\n",
              "      <td>SSE</td>\n",
              "      <td>2900000000000</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>2.35</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>False</td>\n",
              "      <td>inactive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30930</th>\n",
              "      <td>SSE</td>\n",
              "      <td>2900000000000</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>7.01</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>False</td>\n",
              "      <td>inactive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30931</th>\n",
              "      <td>SSE</td>\n",
              "      <td>2900000000000</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>12.21</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>False</td>\n",
              "      <td>inactive</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30932</th>\n",
              "      <td>Crown Gas and Power</td>\n",
              "      <td>3200000000000</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>13.92</td>\n",
              "      <td>2025-07-01</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2025-07-01</td>\n",
              "      <td>False</td>\n",
              "      <td>inactive</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>28446 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6ab6414-d417-4469-847b-c3a5a4b9377e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f6ab6414-d417-4469-847b-c3a5a4b9377e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f6ab6414-d417-4469-847b-c3a5a4b9377e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c29e6b26-13ba-436b-9f48-545e3ba5d775\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c29e6b26-13ba-436b-9f48-545e3ba5d775')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c29e6b26-13ba-436b-9f48-545e3ba5d775 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_d1f0d6e8-09e6-4e3a-939f-1f26b46dca04\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_d1f0d6e8-09e6-4e3a-939f-1f26b46dca04 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 28446,\n  \"fields\": [\n    {\n      \"column\": \"supplier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"Pozitive Energy\",\n          \"E.on Next\",\n          \"Scottish Power\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mpan_mprn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 964844728252,\n        \"min\": 1848605,\n        \"max\": 3200000000000,\n        \"num_unique_values\": 868,\n        \"samples\": [\n          4038977501,\n          56662804,\n          9145451703\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_end_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2022-07-31 00:00:00\",\n        \"max\": \"2028-11-25 00:00:00\",\n        \"num_unique_values\": 409,\n        \"samples\": [\n          \"2025-06-08 00:00:00\",\n          \"2024-11-11 00:00:00\",\n          \"2027-05-19 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"amount_paid\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6624.064192751834,\n        \"min\": -27146.0,\n        \"max\": 196845.8,\n        \"num_unique_values\": 13612,\n        \"samples\": [\n          213.86,\n          955.0,\n          923.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment_month\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2021-10-01 00:00:00\",\n        \"max\": \"2025-07-10 00:00:00\",\n        \"num_unique_values\": 219,\n        \"samples\": [\n          \"2024-07-15 00:00:00\",\n          \"2024-05-21 00:00:00\",\n          \"2024-01-02 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Payment_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Upfront\",\n          \"Recurring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"payment_month_raw\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 219,\n        \"samples\": [\n          \"2024-07-15\",\n          \"2024-05-21\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"is_clawback\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          true,\n          false\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"active\",\n          \"inactive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 1
        }
      ],
      "source": [
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "\n",
        "\n",
        "# 1  read payment_month as plain text\n",
        "df = pd.read_csv(\n",
        "        \"/content/sample_data/collab payment data CSV MAIN 2.csv\",\n",
        "        dtype={\"payment_month\": \"string\"}\n",
        ")\n",
        "\n",
        "# 2  parse contract_end_date (DD/MM/YYYY)\n",
        "df[\"contract_end_date\"] = pd.to_datetime(\n",
        "        df[\"contract_end_date\"],\n",
        "        dayfirst=True,\n",
        "        errors=\"raise\"\n",
        ")\n",
        "\n",
        "# 3  custom parser for the mixed payment_month strings\n",
        "def parse_payment(s: str):\n",
        "    s = s.strip()\n",
        "    if \"-\" in s:\n",
        "        # pattern like 2023-01-05  (Y-D-M)\n",
        "        return pd.to_datetime(s, format=\"%Y-%d-%m\", errors=\"coerce\")\n",
        "    elif \"/\" in s:\n",
        "        # pattern like 01/05/2023  (D/M/Y)\n",
        "        return pd.to_datetime(s, dayfirst=True, errors=\"coerce\")\n",
        "    else:\n",
        "        return pd.NaT          # unexpected layout → NaT\n",
        "\n",
        "df[\"payment_month\"] = df[\"payment_month\"].apply(parse_payment)\n",
        "\n",
        "# ----- sanity check: raise if any payment_month failed to parse -----\n",
        "if df[\"payment_month\"].isna().any():\n",
        "    bad_rows = df[df[\"payment_month\"].isna()].head()\n",
        "    raise ValueError(\n",
        "        \"Some payment_month strings could not be parsed. \"\n",
        "        f\"Sample bad rows:\\n{bad_rows}\"\n",
        "    )\n",
        "# -------------------------------------------------------------------\n",
        "\n",
        "\n",
        "# 4  retain raw text for audit\n",
        "df[\"payment_month_raw\"] = df[\"payment_month\"].dt.strftime(\"%Y-%m-%d\")\n",
        "\n",
        "# 5  remove zeros & flag clawbacks\n",
        "df = df[df[\"amount_paid\"] != 0]\n",
        "df[\"is_clawback\"] = df[\"amount_paid\"] < 0\n",
        "\n",
        "df[\"contract_status\"] = np.where(\n",
        "    df[\"contract_end_date\"] < pd.Timestamp(\"2025-07-01\"),\n",
        "    \"inactive\",\n",
        "    \"active\"\n",
        ")\n",
        "\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "check = df[df[\"mpan_mprn\"] == 1848605]\n",
        "\n",
        "check"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 457
        },
        "collapsed": true,
        "id": "schTY4-AcMqj",
        "outputId": "d1515506-9f6c-4b71-def0-4e574e1ceff8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              supplier  mpan_mprn contract_end_date  amount_paid  \\\n",
              "1005   Pozitive Energy    1848605        2024-02-05        25.58   \n",
              "2439   Pozitive Energy    1848605        2024-02-05        30.13   \n",
              "2450   Pozitive Energy    1848605        2024-02-05        24.07   \n",
              "4956   Pozitive Energy    1848605        2024-02-05        88.14   \n",
              "5530   Pozitive Energy    1848605        2024-02-05        18.01   \n",
              "6423   Pozitive Energy    1848605        2024-02-05         2.52   \n",
              "8163   Pozitive Energy    1848605        2024-02-05        23.06   \n",
              "10086  Pozitive Energy    1848605        2024-02-05        15.32   \n",
              "11692  Pozitive Energy    1848605        2024-02-05         8.42   \n",
              "14209  Pozitive Energy    1848605        2024-02-05        11.11   \n",
              "15655  Pozitive Energy    1848605        2024-02-05         6.40   \n",
              "17139  Pozitive Energy    1848605        2024-02-05         7.57   \n",
              "19241  Pozitive Energy    1848605        2024-02-05        19.86   \n",
              "\n",
              "      payment_month payment_month_raw  is_clawback  \n",
              "1005     2024-01-01        2024-01-01        False  \n",
              "2439     2024-02-01        2024-02-01        False  \n",
              "2450     2024-02-01        2024-02-01        False  \n",
              "4956     2023-04-01        2023-04-01        False  \n",
              "5530     2024-04-01        2024-04-01        False  \n",
              "6423     2023-05-01        2023-05-01        False  \n",
              "8163     2023-06-01        2023-06-01        False  \n",
              "10086    2023-07-01        2023-07-01        False  \n",
              "11692    2023-08-01        2023-08-01        False  \n",
              "14209    2023-09-01        2023-09-01        False  \n",
              "15655    2023-10-01        2023-10-01        False  \n",
              "17139    2023-11-01        2023-11-01        False  \n",
              "19241    2023-12-01        2023-12-01        False  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-88509c6b-3ef7-4465-b591-ba9c01a91211\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>supplier</th>\n",
              "      <th>mpan_mprn</th>\n",
              "      <th>contract_end_date</th>\n",
              "      <th>amount_paid</th>\n",
              "      <th>payment_month</th>\n",
              "      <th>payment_month_raw</th>\n",
              "      <th>is_clawback</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1005</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>25.58</td>\n",
              "      <td>2024-01-01</td>\n",
              "      <td>2024-01-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2439</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>30.13</td>\n",
              "      <td>2024-02-01</td>\n",
              "      <td>2024-02-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2450</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>24.07</td>\n",
              "      <td>2024-02-01</td>\n",
              "      <td>2024-02-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4956</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>88.14</td>\n",
              "      <td>2023-04-01</td>\n",
              "      <td>2023-04-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5530</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>18.01</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6423</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>2.52</td>\n",
              "      <td>2023-05-01</td>\n",
              "      <td>2023-05-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8163</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>23.06</td>\n",
              "      <td>2023-06-01</td>\n",
              "      <td>2023-06-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10086</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>15.32</td>\n",
              "      <td>2023-07-01</td>\n",
              "      <td>2023-07-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11692</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>8.42</td>\n",
              "      <td>2023-08-01</td>\n",
              "      <td>2023-08-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14209</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>11.11</td>\n",
              "      <td>2023-09-01</td>\n",
              "      <td>2023-09-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15655</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>6.40</td>\n",
              "      <td>2023-10-01</td>\n",
              "      <td>2023-10-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17139</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>7.57</td>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>2023-11-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19241</th>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>1848605</td>\n",
              "      <td>2024-02-05</td>\n",
              "      <td>19.86</td>\n",
              "      <td>2023-12-01</td>\n",
              "      <td>2023-12-01</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-88509c6b-3ef7-4465-b591-ba9c01a91211')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-88509c6b-3ef7-4465-b591-ba9c01a91211 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-88509c6b-3ef7-4465-b591-ba9c01a91211');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-306cb18a-ebc1-4775-809d-21796ef94e24\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-306cb18a-ebc1-4775-809d-21796ef94e24')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-306cb18a-ebc1-4775-809d-21796ef94e24 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_170eea34-9c05-4076-a6a9-c48bb607e8f8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('check')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_170eea34-9c05-4076-a6a9-c48bb607e8f8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('check');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "check",
              "repr_error": "0"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "column\tmeaning\n",
        "gross_amount\tsum of positive payments in that month\n",
        "clawback_amount\tsum of negative payments (refunds)\n",
        "net_amount\tgross + clawback (true cash effect)\n",
        "num_payments\tpayment count"
      ],
      "metadata": {
        "id": "3Sajb2rslaVc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Create month key\n",
        "df[\"month_period\"] = df[\"payment_month\"].dt.to_period(\"M\")\n",
        "\n",
        "# 2. Aggregate per MPAN-month-supplier\n",
        "monthly = (\n",
        "    df.groupby([\"supplier\", \"mpan_mprn\", \"month_period\"])\n",
        "      .agg(\n",
        "          gross_amount    = (\"amount_paid\",   lambda s: s[s > 0].sum()),\n",
        "          net_amount      = (\"amount_paid\",   \"sum\"),\n",
        "          clawback_amount = (\"amount_paid\",   lambda s: s[s < 0].sum()),\n",
        "          num_payments    = (\"amount_paid\",   \"size\")\n",
        "      )\n",
        "      .reset_index()\n",
        ")\n",
        "\n",
        "# 3. Build calendar per mpan-supplier up to June 2025\n",
        "last_period = pd.Period(\"2025-06\", freq=\"M\")\n",
        "\n",
        "rows = [\n",
        "    pd.DataFrame({\n",
        "        \"mpan_mprn\": g[\"mpan_mprn\"].iloc[0],\n",
        "        \"supplier\": g[\"supplier\"].iloc[0],\n",
        "        \"month_period\": pd.period_range(g[\"month_period\"].min(), last_period, freq=\"M\")\n",
        "    })\n",
        "    for _, g in monthly.groupby([\"mpan_mprn\", \"supplier\"])\n",
        "]\n",
        "\n",
        "calendar = pd.concat(rows, ignore_index=True)\n",
        "\n",
        "# 4. Merge supplier info and contract details into calendar\n",
        "calendar = calendar.merge(\n",
        "    df[[\"mpan_mprn\", \"supplier\", \"contract_end_date\", \"Payment_Type\", \"contract_status\"]]\n",
        "      .drop_duplicates(),\n",
        "    on=[\"mpan_mprn\", \"supplier\"],\n",
        "    how=\"left\"\n",
        ")\n",
        "\n",
        "# 5. Merge monthly aggregation and fill blanks\n",
        "payment_aggregation = (\n",
        "    calendar.merge(monthly, on=[\"mpan_mprn\", \"supplier\", \"month_period\"], how=\"left\")\n",
        "            .fillna({\n",
        "                \"gross_amount\":    0,\n",
        "                \"net_amount\":      0,\n",
        "                \"clawback_amount\": 0,\n",
        "                \"num_payments\":    0\n",
        "            })\n",
        ")\n",
        "\n",
        "payment_aggregation\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "UXc7pF0RM973",
        "outputId": "436d1be6-01ac-41e1-8499-52e623e2dbf8"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           mpan_mprn supplier month_period contract_end_date Payment_Type  \\\n",
              "0            1848605      EDF      2024-05        2025-02-05      Upfront   \n",
              "1            1848605      EDF      2024-06        2025-02-05      Upfront   \n",
              "2            1848605      EDF      2024-07        2025-02-05      Upfront   \n",
              "3            1848605      EDF      2024-08        2025-02-05      Upfront   \n",
              "4            1848605      EDF      2024-09        2025-02-05      Upfront   \n",
              "...              ...      ...          ...               ...          ...   \n",
              "27090  2900000000000      SSE      2025-02        2025-05-31    Recurring   \n",
              "27091  2900000000000      SSE      2025-03        2025-05-31    Recurring   \n",
              "27092  2900000000000      SSE      2025-04        2025-05-31    Recurring   \n",
              "27093  2900000000000      SSE      2025-05        2025-05-31    Recurring   \n",
              "27094  2900000000000      SSE      2025-06        2025-05-31    Recurring   \n",
              "\n",
              "      contract_status  gross_amount  net_amount  clawback_amount  num_payments  \n",
              "0            inactive        208.61      208.61              0.0           1.0  \n",
              "1            inactive          0.00        0.00              0.0           0.0  \n",
              "2            inactive          0.00        0.00              0.0           0.0  \n",
              "3            inactive          0.00        0.00              0.0           0.0  \n",
              "4            inactive          0.00        0.00              0.0           0.0  \n",
              "...               ...           ...         ...              ...           ...  \n",
              "27090        inactive          0.00        0.00              0.0           0.0  \n",
              "27091        inactive         36.09       36.09              0.0           2.0  \n",
              "27092        inactive         38.16       38.16              0.0          45.0  \n",
              "27093        inactive         18.83       18.83              0.0           2.0  \n",
              "27094        inactive          0.00        0.00              0.0           0.0  \n",
              "\n",
              "[27095 rows x 10 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-86c09851-f142-44c4-8549-c0d3b3b352d0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpan_mprn</th>\n",
              "      <th>supplier</th>\n",
              "      <th>month_period</th>\n",
              "      <th>contract_end_date</th>\n",
              "      <th>Payment_Type</th>\n",
              "      <th>contract_status</th>\n",
              "      <th>gross_amount</th>\n",
              "      <th>net_amount</th>\n",
              "      <th>clawback_amount</th>\n",
              "      <th>num_payments</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-05</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>inactive</td>\n",
              "      <td>208.61</td>\n",
              "      <td>208.61</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-06</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>inactive</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-07</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>inactive</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-08</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>inactive</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-09</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>inactive</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27090</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-02</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>inactive</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27091</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-03</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>inactive</td>\n",
              "      <td>36.09</td>\n",
              "      <td>36.09</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27092</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-04</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>inactive</td>\n",
              "      <td>38.16</td>\n",
              "      <td>38.16</td>\n",
              "      <td>0.0</td>\n",
              "      <td>45.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27093</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-05</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>inactive</td>\n",
              "      <td>18.83</td>\n",
              "      <td>18.83</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27094</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-06</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>inactive</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>27095 rows × 10 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86c09851-f142-44c4-8549-c0d3b3b352d0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-86c09851-f142-44c4-8549-c0d3b3b352d0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-86c09851-f142-44c4-8549-c0d3b3b352d0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-30889fb9-b80d-4d7e-8eeb-2fe47044aa17\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-30889fb9-b80d-4d7e-8eeb-2fe47044aa17')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-30889fb9-b80d-4d7e-8eeb-2fe47044aa17 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_ce51483e-4428-472e-af41-49caaf3f7dc2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('payment_aggregation')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_ce51483e-4428-472e-af41-49caaf3f7dc2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('payment_aggregation');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "payment_aggregation",
              "summary": "{\n  \"name\": \"payment_aggregation\",\n  \"rows\": 27095,\n  \"fields\": [\n    {\n      \"column\": \"mpan_mprn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 958448071747,\n        \"min\": 1848605,\n        \"max\": 2900000000000,\n        \"num_unique_values\": 867,\n        \"samples\": [\n          2422447907,\n          8821413300,\n          57762802\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"supplier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"EDF\",\n          \"E.on Next\",\n          \"Scottish Power\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_period\",\n      \"properties\": {\n        \"dtype\": \"period[M]\",\n        \"num_unique_values\": 45,\n        \"samples\": [\n          \"2022-03\",\n          \"2024-03\",\n          \"2024-04\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_end_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2022-07-31 00:00:00\",\n        \"max\": \"2028-11-25 00:00:00\",\n        \"num_unique_values\": 406,\n        \"samples\": [\n          \"2024-11-30 00:00:00\",\n          \"2023-04-28 00:00:00\",\n          \"2027-09-02 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Payment_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Recurring\",\n          \"Upfront\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"active\",\n          \"inactive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gross_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7859.002246777264,\n        \"min\": 0.0,\n        \"max\": 303810.9,\n        \"num_unique_values\": 9539,\n        \"samples\": [\n          3770.0,\n          94.33\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"net_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7868.060365882222,\n        \"min\": -27146.0,\n        \"max\": 303752.89999999997,\n        \"num_unique_values\": 9953,\n        \"samples\": [\n          -34.35000000000001,\n          4.9399999999999995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clawback_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 444.98528995445787,\n        \"min\": -27146.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1201,\n        \"samples\": [\n          -74.52,\n          -118.28\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num_payments\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.0859802707557527,\n        \"min\": 0.0,\n        \"max\": 159.0,\n        \"num_unique_values\": 61,\n        \"samples\": [\n          1.0,\n          22.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "check2 = train[train[\"mpan_mprn\"] == 5297805]\n",
        "\n",
        "check2"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 707
        },
        "collapsed": true,
        "id": "RysNxORFcpeI",
        "outputId": "29965407-5443-4060-96f0-dbbac8c3d3b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    mpan_mprn month_period  gross_amount  net_amount  clawback_amount  \\\n",
              "45    5297805      2023-10         31.48       31.48             0.00   \n",
              "46    5297805      2023-11         29.96       29.96             0.00   \n",
              "47    5297805      2023-12         72.04       72.04             0.00   \n",
              "48    5297805      2024-01        138.69      138.69             0.00   \n",
              "49    5297805      2024-02        163.77      163.77             0.00   \n",
              "50    5297805      2024-03        179.59      179.59             0.00   \n",
              "51    5297805      2024-04        144.75      144.75             0.00   \n",
              "52    5297805      2024-05        138.35      138.35             0.00   \n",
              "53    5297805      2024-06        100.31      100.31             0.00   \n",
              "54    5297805      2024-07         67.42       67.42             0.00   \n",
              "55    5297805      2024-08         46.26       40.63            -5.63   \n",
              "56    5297805      2024-09          0.00        0.00             0.00   \n",
              "57    5297805      2024-10          0.00        0.00             0.00   \n",
              "58    5297805      2024-11          0.00        0.00             0.00   \n",
              "59    5297805      2024-12          0.00        0.00             0.00   \n",
              "60    5297805      2025-01          0.00        0.00             0.00   \n",
              "61    5297805      2025-02          0.00        0.00             0.00   \n",
              "62    5297805      2025-03          0.00        0.00             0.00   \n",
              "63    5297805      2025-04          0.00        0.00             0.00   \n",
              "64    5297805      2025-05          0.00        0.00             0.00   \n",
              "65    5297805      2025-06          0.00        0.00             0.00   \n",
              "\n",
              "    num_payments  \n",
              "45           2.0  \n",
              "46           1.0  \n",
              "47           1.0  \n",
              "48           1.0  \n",
              "49           1.0  \n",
              "50           1.0  \n",
              "51           1.0  \n",
              "52           1.0  \n",
              "53           1.0  \n",
              "54           1.0  \n",
              "55           2.0  \n",
              "56           0.0  \n",
              "57           0.0  \n",
              "58           0.0  \n",
              "59           0.0  \n",
              "60           0.0  \n",
              "61           0.0  \n",
              "62           0.0  \n",
              "63           0.0  \n",
              "64           0.0  \n",
              "65           0.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eb10909a-1d51-4a29-bf69-d732ceee0ff7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpan_mprn</th>\n",
              "      <th>month_period</th>\n",
              "      <th>gross_amount</th>\n",
              "      <th>net_amount</th>\n",
              "      <th>clawback_amount</th>\n",
              "      <th>num_payments</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>45</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2023-10</td>\n",
              "      <td>31.48</td>\n",
              "      <td>31.48</td>\n",
              "      <td>0.00</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>46</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2023-11</td>\n",
              "      <td>29.96</td>\n",
              "      <td>29.96</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>47</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2023-12</td>\n",
              "      <td>72.04</td>\n",
              "      <td>72.04</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-01</td>\n",
              "      <td>138.69</td>\n",
              "      <td>138.69</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>49</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-02</td>\n",
              "      <td>163.77</td>\n",
              "      <td>163.77</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-03</td>\n",
              "      <td>179.59</td>\n",
              "      <td>179.59</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>51</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-04</td>\n",
              "      <td>144.75</td>\n",
              "      <td>144.75</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>52</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-05</td>\n",
              "      <td>138.35</td>\n",
              "      <td>138.35</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-06</td>\n",
              "      <td>100.31</td>\n",
              "      <td>100.31</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>54</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-07</td>\n",
              "      <td>67.42</td>\n",
              "      <td>67.42</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>55</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-08</td>\n",
              "      <td>46.26</td>\n",
              "      <td>40.63</td>\n",
              "      <td>-5.63</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>56</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-09</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>57</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-10</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>58</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-11</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2024-12</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>60</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2025-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>61</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2025-02</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2025-03</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>63</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2025-04</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>64</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2025-05</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>65</th>\n",
              "      <td>5297805</td>\n",
              "      <td>2025-06</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb10909a-1d51-4a29-bf69-d732ceee0ff7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eb10909a-1d51-4a29-bf69-d732ceee0ff7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eb10909a-1d51-4a29-bf69-d732ceee0ff7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-983dcbff-2072-4f81-9191-21fc36a10c63\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-983dcbff-2072-4f81-9191-21fc36a10c63')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-983dcbff-2072-4f81-9191-21fc36a10c63 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_359144a8-8fa8-4fff-b2fc-f28947bf41a2\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('check2')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_359144a8-8fa8-4fff-b2fc-f28947bf41a2 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('check2');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "check2",
              "summary": "{\n  \"name\": \"check2\",\n  \"rows\": 21,\n  \"fields\": [\n    {\n      \"column\": \"mpan_mprn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 5297805,\n        \"max\": 5297805,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          5297805\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_period\",\n      \"properties\": {\n        \"dtype\": \"period[M]\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"2023-10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gross_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 64.52850103783969,\n        \"min\": 0.0,\n        \"max\": 179.59,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          46.26\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"net_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 64.56950715904456,\n        \"min\": 0.0,\n        \"max\": 179.59,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          40.629999999999995\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clawback_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.2285667220286371,\n        \"min\": -5.63,\n        \"max\": 0.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -5.63\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num_payments\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6690433824641325,\n        \"min\": 0.0,\n        \"max\": 2.0,\n        \"num_unique_values\": 3,\n        \"samples\": [\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Sort for rolling logic\n",
        "training_data = payment_aggregation.sort_values([\"mpan_mprn\", \"supplier\", \"month_period\"])\n",
        "\n",
        "# 1. Month + Season\n",
        "training_data[\"month_number\"] = training_data[\"month_period\"].dt.month\n",
        "season_map = {\n",
        "    12: \"Winter\", 1: \"Winter\", 2: \"Winter\",\n",
        "    3: \"Spring\", 4: \"Spring\", 5: \"Spring\",\n",
        "    6: \"Summer\", 7: \"Summer\", 8: \"Summer\",\n",
        "    9: \"Autumn\", 10: \"Autumn\", 11: \"Autumn\"\n",
        "}\n",
        "training_data[\"season\"] = training_data[\"month_number\"].map(season_map)\n",
        "\n",
        "# 2. Rolling Features — now grouped by both mpan and supplier\n",
        "training_data[\"roll_3m_net\"] = (\n",
        "    training_data.groupby([\"mpan_mprn\", \"supplier\"])[\"net_amount\"]\n",
        "                 .rolling(window=3, min_periods=1)\n",
        "                 .sum()\n",
        "                 .reset_index(level=[0, 1], drop=True)\n",
        ")\n",
        "\n",
        "training_data[\"roll_3m_avg\"] = (\n",
        "    training_data.groupby([\"mpan_mprn\", \"supplier\"])[\"net_amount\"]\n",
        "                 .rolling(window=3, min_periods=1)\n",
        "                 .mean()\n",
        "                 .reset_index(level=[0, 1], drop=True)\n",
        ")\n",
        "\n",
        "training_data[\"roll_3m_gross\"] = (\n",
        "    training_data.groupby([\"mpan_mprn\", \"supplier\"])[\"gross_amount\"]\n",
        "                 .rolling(window=3, min_periods=1)\n",
        "                 .sum()\n",
        "                 .reset_index(level=[0, 1], drop=True)\n",
        ")\n",
        "\n",
        "# 3. Months since previous payment — grouped by both mpan and supplier\n",
        "period_code = training_data[\"month_period\"].astype(int)\n",
        "training_data[\"months_since_prev_payment\"] = (\n",
        "    period_code.groupby([training_data[\"mpan_mprn\"], training_data[\"supplier\"]]).diff()\n",
        ")\n",
        "\n",
        "# 4. Reorder\n",
        "cols_to_keep = [\n",
        "    \"mpan_mprn\", \"supplier\", \"month_period\",\n",
        "    \"net_amount\", \"gross_amount\", \"clawback_amount\", \"num_payments\",\n",
        "    \"contract_end_date\", \"contract_status\", \"Payment_Type\",  # ← fix: add comma here\n",
        "    \"month_number\", \"season\",\n",
        "    \"roll_3m_net\", \"roll_3m_avg\", \"roll_3m_gross\",\n",
        "    \"months_since_prev_payment\"\n",
        "]\n",
        "\n",
        "\n",
        "# Force rolling values to 0 for June 2025 rows where net_amount is 0\n",
        "\n",
        "# Convert to datetime first\n",
        "training_data[\"month_period\"] = training_data[\"month_period\"].dt.to_timestamp()\n",
        "\n",
        "mask = (training_data[\"month_period\"] == pd.Timestamp(\"2025-06-01\")) & (training_data[\"net_amount\"] == 0)\n",
        "training_data.loc[mask, [\"roll_3m_net\", \"roll_3m_avg\"]] = 0\n",
        "\n",
        "training_data = training_data[cols_to_keep]\n",
        "\n",
        "training_data = training_data[\n",
        "    (training_data[\"contract_status\"] == \"active\") |\n",
        "    (training_data[\"month_period\"] <= training_data[\"contract_end_date\"])\n",
        "]\n",
        "\n",
        "\n",
        "training_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "FQ79bffTp_SY",
        "outputId": "a7f317c4-3943-4bf9-b065-f948bcbcf09a"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           mpan_mprn supplier month_period  net_amount  gross_amount  \\\n",
              "0            1848605      EDF   2024-05-01      208.61        208.61   \n",
              "1            1848605      EDF   2024-06-01        0.00          0.00   \n",
              "2            1848605      EDF   2024-07-01        0.00          0.00   \n",
              "3            1848605      EDF   2024-08-01        0.00          0.00   \n",
              "4            1848605      EDF   2024-09-01        0.00          0.00   \n",
              "...              ...      ...          ...         ...           ...   \n",
              "27089  2900000000000      SSE   2025-01-01       34.71         34.71   \n",
              "27090  2900000000000      SSE   2025-02-01        0.00          0.00   \n",
              "27091  2900000000000      SSE   2025-03-01       36.09         36.09   \n",
              "27092  2900000000000      SSE   2025-04-01       38.16         38.16   \n",
              "27093  2900000000000      SSE   2025-05-01       18.83         18.83   \n",
              "\n",
              "       clawback_amount  num_payments contract_end_date contract_status  \\\n",
              "0                  0.0           1.0        2025-02-05        inactive   \n",
              "1                  0.0           0.0        2025-02-05        inactive   \n",
              "2                  0.0           0.0        2025-02-05        inactive   \n",
              "3                  0.0           0.0        2025-02-05        inactive   \n",
              "4                  0.0           0.0        2025-02-05        inactive   \n",
              "...                ...           ...               ...             ...   \n",
              "27089              0.0          39.0        2025-05-31        inactive   \n",
              "27090              0.0           0.0        2025-05-31        inactive   \n",
              "27091              0.0           2.0        2025-05-31        inactive   \n",
              "27092              0.0          45.0        2025-05-31        inactive   \n",
              "27093              0.0           2.0        2025-05-31        inactive   \n",
              "\n",
              "      Payment_Type  month_number  season  roll_3m_net  roll_3m_avg  \\\n",
              "0          Upfront             5  Spring       208.61   208.610000   \n",
              "1          Upfront             6  Summer       208.61   104.305000   \n",
              "2          Upfront             7  Summer       208.61    69.536667   \n",
              "3          Upfront             8  Summer         0.00     0.000000   \n",
              "4          Upfront             9  Autumn         0.00     0.000000   \n",
              "...            ...           ...     ...          ...          ...   \n",
              "27089    Recurring             1  Winter        72.68    24.226667   \n",
              "27090    Recurring             2  Winter        54.51    18.170000   \n",
              "27091    Recurring             3  Spring        70.80    23.600000   \n",
              "27092    Recurring             4  Spring        74.25    24.750000   \n",
              "27093    Recurring             5  Spring        93.08    31.026667   \n",
              "\n",
              "       roll_3m_gross  months_since_prev_payment  \n",
              "0             208.61                        NaN  \n",
              "1             208.61                        1.0  \n",
              "2             208.61                        1.0  \n",
              "3               0.00                        1.0  \n",
              "4               0.00                        1.0  \n",
              "...              ...                        ...  \n",
              "27089          72.68                        1.0  \n",
              "27090          54.51                        1.0  \n",
              "27091          70.80                        1.0  \n",
              "27092          74.25                        1.0  \n",
              "27093          93.08                        1.0  \n",
              "\n",
              "[21835 rows x 16 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8b7f31e0-618a-4cf8-8f1d-cb220d40b29d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpan_mprn</th>\n",
              "      <th>supplier</th>\n",
              "      <th>month_period</th>\n",
              "      <th>net_amount</th>\n",
              "      <th>gross_amount</th>\n",
              "      <th>clawback_amount</th>\n",
              "      <th>num_payments</th>\n",
              "      <th>contract_end_date</th>\n",
              "      <th>contract_status</th>\n",
              "      <th>Payment_Type</th>\n",
              "      <th>month_number</th>\n",
              "      <th>season</th>\n",
              "      <th>roll_3m_net</th>\n",
              "      <th>roll_3m_avg</th>\n",
              "      <th>roll_3m_gross</th>\n",
              "      <th>months_since_prev_payment</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-05-01</td>\n",
              "      <td>208.61</td>\n",
              "      <td>208.61</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>5</td>\n",
              "      <td>Spring</td>\n",
              "      <td>208.61</td>\n",
              "      <td>208.610000</td>\n",
              "      <td>208.61</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-06-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>6</td>\n",
              "      <td>Summer</td>\n",
              "      <td>208.61</td>\n",
              "      <td>104.305000</td>\n",
              "      <td>208.61</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-07-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>7</td>\n",
              "      <td>Summer</td>\n",
              "      <td>208.61</td>\n",
              "      <td>69.536667</td>\n",
              "      <td>208.61</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-08-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>8</td>\n",
              "      <td>Summer</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-09-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>9</td>\n",
              "      <td>Autumn</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27089</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-01-01</td>\n",
              "      <td>34.71</td>\n",
              "      <td>34.71</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>1</td>\n",
              "      <td>Winter</td>\n",
              "      <td>72.68</td>\n",
              "      <td>24.226667</td>\n",
              "      <td>72.68</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27090</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-02-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2</td>\n",
              "      <td>Winter</td>\n",
              "      <td>54.51</td>\n",
              "      <td>18.170000</td>\n",
              "      <td>54.51</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27091</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-03-01</td>\n",
              "      <td>36.09</td>\n",
              "      <td>36.09</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>3</td>\n",
              "      <td>Spring</td>\n",
              "      <td>70.80</td>\n",
              "      <td>23.600000</td>\n",
              "      <td>70.80</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27092</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-04-01</td>\n",
              "      <td>38.16</td>\n",
              "      <td>38.16</td>\n",
              "      <td>0.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>4</td>\n",
              "      <td>Spring</td>\n",
              "      <td>74.25</td>\n",
              "      <td>24.750000</td>\n",
              "      <td>74.25</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27093</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-05-01</td>\n",
              "      <td>18.83</td>\n",
              "      <td>18.83</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>5</td>\n",
              "      <td>Spring</td>\n",
              "      <td>93.08</td>\n",
              "      <td>31.026667</td>\n",
              "      <td>93.08</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21835 rows × 16 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b7f31e0-618a-4cf8-8f1d-cb220d40b29d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8b7f31e0-618a-4cf8-8f1d-cb220d40b29d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8b7f31e0-618a-4cf8-8f1d-cb220d40b29d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-edd1856f-abe9-4090-a306-d99731d71799\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-edd1856f-abe9-4090-a306-d99731d71799')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-edd1856f-abe9-4090-a306-d99731d71799 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_7b5d8084-07ad-4838-9487-fcbc9ad04756\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('training_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_7b5d8084-07ad-4838-9487-fcbc9ad04756 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('training_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "training_data",
              "summary": "{\n  \"name\": \"training_data\",\n  \"rows\": 21835,\n  \"fields\": [\n    {\n      \"column\": \"mpan_mprn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 962051541235,\n        \"min\": 1848605,\n        \"max\": 2900000000000,\n        \"num_unique_values\": 854,\n        \"samples\": [\n          56662804,\n          8863360407,\n          1827224001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"supplier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"EDF\",\n          \"Yu Energy\",\n          \"Scottish Power\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_period\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2021-10-01 00:00:00\",\n        \"max\": \"2025-06-01 00:00:00\",\n        \"num_unique_values\": 45,\n        \"samples\": [\n          \"2022-03-01 00:00:00\",\n          \"2025-05-01 00:00:00\",\n          \"2025-06-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"net_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8748.054121352116,\n        \"min\": -27146.0,\n        \"max\": 303752.89999999997,\n        \"num_unique_values\": 9745,\n        \"samples\": [\n          42.36,\n          63.94,\n          56.81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gross_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8737.416498343866,\n        \"min\": 0.0,\n        \"max\": 303810.9,\n        \"num_unique_values\": 9370,\n        \"samples\": [\n          129.09,\n          567.81,\n          3119.95\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clawback_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 488.87622774922346,\n        \"min\": -27146.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1141,\n        \"samples\": [\n          -3.79,\n          -19.54,\n          -62.34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num_payments\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3567479456384253,\n        \"min\": 0.0,\n        \"max\": 159.0,\n        \"num_unique_values\": 61,\n        \"samples\": [\n          1.0,\n          22.0,\n          29.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_end_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-01-31 00:00:00\",\n        \"max\": \"2028-11-25 00:00:00\",\n        \"num_unique_values\": 397,\n        \"samples\": [\n          \"2024-06-30 00:00:00\",\n          \"2027-04-24 00:00:00\",\n          \"2026-10-03 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"active\",\n          \"inactive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Payment_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Recurring\",\n          \"Upfront\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Summer\",\n          \"Winter\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_net\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24605.701387001678,\n        \"min\": -52045.0,\n        \"max\": 870337.7000000001,\n        \"num_unique_values\": 12673,\n        \"samples\": [\n          5500.8,\n          16.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_avg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8487.56800672954,\n        \"min\": -17348.333333333332,\n        \"max\": 290112.5666666667,\n        \"num_unique_values\": 13991,\n        \"samples\": [\n          35.419999999999995,\n          23.17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_gross\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24783.319803245013,\n        \"min\": 0.0,\n        \"max\": 870453.8999999999,\n        \"num_unique_values\": 12677,\n        \"samples\": [\n          72.77,\n          0.67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"months_since_prev_payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "training_data = training_data.sort_values([\"mpan_mprn\", \"supplier\", \"month_period\"])\n",
        "\n",
        "\n",
        "training_data[\"next_month_payment\"] = (\n",
        "    training_data\n",
        "    .groupby([\"mpan_mprn\", \"supplier\"])[\"net_amount\"]\n",
        "    .shift(-1)\n",
        ")\n",
        "\n",
        "\n",
        "training_data[\"will_pay_next_month\"] = (\n",
        "    training_data[\"next_month_payment\"] > 0\n",
        ").astype(int)\n",
        "\n",
        "\n",
        "training_data\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 443
        },
        "id": "ft9z8UptL-bU",
        "outputId": "bf103273-d5c9-4b95-f69b-8d4249ab07c1"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           mpan_mprn supplier month_period  net_amount  gross_amount  \\\n",
              "0            1848605      EDF   2024-05-01      208.61        208.61   \n",
              "1            1848605      EDF   2024-06-01        0.00          0.00   \n",
              "2            1848605      EDF   2024-07-01        0.00          0.00   \n",
              "3            1848605      EDF   2024-08-01        0.00          0.00   \n",
              "4            1848605      EDF   2024-09-01        0.00          0.00   \n",
              "...              ...      ...          ...         ...           ...   \n",
              "27089  2900000000000      SSE   2025-01-01       34.71         34.71   \n",
              "27090  2900000000000      SSE   2025-02-01        0.00          0.00   \n",
              "27091  2900000000000      SSE   2025-03-01       36.09         36.09   \n",
              "27092  2900000000000      SSE   2025-04-01       38.16         38.16   \n",
              "27093  2900000000000      SSE   2025-05-01       18.83         18.83   \n",
              "\n",
              "       clawback_amount  num_payments contract_end_date contract_status  \\\n",
              "0                  0.0           1.0        2025-02-05        inactive   \n",
              "1                  0.0           0.0        2025-02-05        inactive   \n",
              "2                  0.0           0.0        2025-02-05        inactive   \n",
              "3                  0.0           0.0        2025-02-05        inactive   \n",
              "4                  0.0           0.0        2025-02-05        inactive   \n",
              "...                ...           ...               ...             ...   \n",
              "27089              0.0          39.0        2025-05-31        inactive   \n",
              "27090              0.0           0.0        2025-05-31        inactive   \n",
              "27091              0.0           2.0        2025-05-31        inactive   \n",
              "27092              0.0          45.0        2025-05-31        inactive   \n",
              "27093              0.0           2.0        2025-05-31        inactive   \n",
              "\n",
              "      Payment_Type  month_number  season  roll_3m_net  roll_3m_avg  \\\n",
              "0          Upfront             5  Spring       208.61   208.610000   \n",
              "1          Upfront             6  Summer       208.61   104.305000   \n",
              "2          Upfront             7  Summer       208.61    69.536667   \n",
              "3          Upfront             8  Summer         0.00     0.000000   \n",
              "4          Upfront             9  Autumn         0.00     0.000000   \n",
              "...            ...           ...     ...          ...          ...   \n",
              "27089    Recurring             1  Winter        72.68    24.226667   \n",
              "27090    Recurring             2  Winter        54.51    18.170000   \n",
              "27091    Recurring             3  Spring        70.80    23.600000   \n",
              "27092    Recurring             4  Spring        74.25    24.750000   \n",
              "27093    Recurring             5  Spring        93.08    31.026667   \n",
              "\n",
              "       roll_3m_gross  months_since_prev_payment  next_month_payment  \\\n",
              "0             208.61                        NaN                0.00   \n",
              "1             208.61                        1.0                0.00   \n",
              "2             208.61                        1.0                0.00   \n",
              "3               0.00                        1.0                0.00   \n",
              "4               0.00                        1.0                0.00   \n",
              "...              ...                        ...                 ...   \n",
              "27089          72.68                        1.0                0.00   \n",
              "27090          54.51                        1.0               36.09   \n",
              "27091          70.80                        1.0               38.16   \n",
              "27092          74.25                        1.0               18.83   \n",
              "27093          93.08                        1.0                 NaN   \n",
              "\n",
              "       will_pay_next_month  \n",
              "0                        0  \n",
              "1                        0  \n",
              "2                        0  \n",
              "3                        0  \n",
              "4                        0  \n",
              "...                    ...  \n",
              "27089                    0  \n",
              "27090                    1  \n",
              "27091                    1  \n",
              "27092                    1  \n",
              "27093                    0  \n",
              "\n",
              "[21835 rows x 18 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b5080294-9679-4142-9823-ab2ea2c6fec0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpan_mprn</th>\n",
              "      <th>supplier</th>\n",
              "      <th>month_period</th>\n",
              "      <th>net_amount</th>\n",
              "      <th>gross_amount</th>\n",
              "      <th>clawback_amount</th>\n",
              "      <th>num_payments</th>\n",
              "      <th>contract_end_date</th>\n",
              "      <th>contract_status</th>\n",
              "      <th>Payment_Type</th>\n",
              "      <th>month_number</th>\n",
              "      <th>season</th>\n",
              "      <th>roll_3m_net</th>\n",
              "      <th>roll_3m_avg</th>\n",
              "      <th>roll_3m_gross</th>\n",
              "      <th>months_since_prev_payment</th>\n",
              "      <th>next_month_payment</th>\n",
              "      <th>will_pay_next_month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-05-01</td>\n",
              "      <td>208.61</td>\n",
              "      <td>208.61</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>5</td>\n",
              "      <td>Spring</td>\n",
              "      <td>208.61</td>\n",
              "      <td>208.610000</td>\n",
              "      <td>208.61</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-06-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>6</td>\n",
              "      <td>Summer</td>\n",
              "      <td>208.61</td>\n",
              "      <td>104.305000</td>\n",
              "      <td>208.61</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-07-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>7</td>\n",
              "      <td>Summer</td>\n",
              "      <td>208.61</td>\n",
              "      <td>69.536667</td>\n",
              "      <td>208.61</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-08-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>8</td>\n",
              "      <td>Summer</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-09-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>9</td>\n",
              "      <td>Autumn</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27089</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-01-01</td>\n",
              "      <td>34.71</td>\n",
              "      <td>34.71</td>\n",
              "      <td>0.0</td>\n",
              "      <td>39.0</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>1</td>\n",
              "      <td>Winter</td>\n",
              "      <td>72.68</td>\n",
              "      <td>24.226667</td>\n",
              "      <td>72.68</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27090</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-02-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2</td>\n",
              "      <td>Winter</td>\n",
              "      <td>54.51</td>\n",
              "      <td>18.170000</td>\n",
              "      <td>54.51</td>\n",
              "      <td>1.0</td>\n",
              "      <td>36.09</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27091</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-03-01</td>\n",
              "      <td>36.09</td>\n",
              "      <td>36.09</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>3</td>\n",
              "      <td>Spring</td>\n",
              "      <td>70.80</td>\n",
              "      <td>23.600000</td>\n",
              "      <td>70.80</td>\n",
              "      <td>1.0</td>\n",
              "      <td>38.16</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27092</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-04-01</td>\n",
              "      <td>38.16</td>\n",
              "      <td>38.16</td>\n",
              "      <td>0.0</td>\n",
              "      <td>45.0</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>4</td>\n",
              "      <td>Spring</td>\n",
              "      <td>74.25</td>\n",
              "      <td>24.750000</td>\n",
              "      <td>74.25</td>\n",
              "      <td>1.0</td>\n",
              "      <td>18.83</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27093</th>\n",
              "      <td>2900000000000</td>\n",
              "      <td>SSE</td>\n",
              "      <td>2025-05-01</td>\n",
              "      <td>18.83</td>\n",
              "      <td>18.83</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2025-05-31</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>5</td>\n",
              "      <td>Spring</td>\n",
              "      <td>93.08</td>\n",
              "      <td>31.026667</td>\n",
              "      <td>93.08</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>21835 rows × 18 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5080294-9679-4142-9823-ab2ea2c6fec0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b5080294-9679-4142-9823-ab2ea2c6fec0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b5080294-9679-4142-9823-ab2ea2c6fec0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7084c9c3-baa3-475f-89a1-946725185bae\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7084c9c3-baa3-475f-89a1-946725185bae')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7084c9c3-baa3-475f-89a1-946725185bae button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_2c08bc13-217f-4a24-bbf3-46e5adedcf5c\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('training_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2c08bc13-217f-4a24-bbf3-46e5adedcf5c button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('training_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "training_data",
              "summary": "{\n  \"name\": \"training_data\",\n  \"rows\": 21835,\n  \"fields\": [\n    {\n      \"column\": \"mpan_mprn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 962051541235,\n        \"min\": 1848605,\n        \"max\": 2900000000000,\n        \"num_unique_values\": 854,\n        \"samples\": [\n          56662804,\n          8863360407,\n          1827224001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"supplier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"EDF\",\n          \"Yu Energy\",\n          \"Scottish Power\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_period\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2021-10-01 00:00:00\",\n        \"max\": \"2025-06-01 00:00:00\",\n        \"num_unique_values\": 45,\n        \"samples\": [\n          \"2022-03-01 00:00:00\",\n          \"2025-05-01 00:00:00\",\n          \"2025-06-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"net_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8748.054121352116,\n        \"min\": -27146.0,\n        \"max\": 303752.89999999997,\n        \"num_unique_values\": 9745,\n        \"samples\": [\n          42.36,\n          63.94,\n          56.81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gross_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8737.416498343866,\n        \"min\": 0.0,\n        \"max\": 303810.9,\n        \"num_unique_values\": 9370,\n        \"samples\": [\n          129.09,\n          567.81,\n          3119.95\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clawback_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 488.87622774922346,\n        \"min\": -27146.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1141,\n        \"samples\": [\n          -3.79,\n          -19.54,\n          -62.34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num_payments\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3567479456384253,\n        \"min\": 0.0,\n        \"max\": 159.0,\n        \"num_unique_values\": 61,\n        \"samples\": [\n          1.0,\n          22.0,\n          29.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_end_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-01-31 00:00:00\",\n        \"max\": \"2028-11-25 00:00:00\",\n        \"num_unique_values\": 397,\n        \"samples\": [\n          \"2024-06-30 00:00:00\",\n          \"2027-04-24 00:00:00\",\n          \"2026-10-03 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"active\",\n          \"inactive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Payment_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Recurring\",\n          \"Upfront\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Summer\",\n          \"Winter\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_net\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24605.701387001678,\n        \"min\": -52045.0,\n        \"max\": 870337.7000000001,\n        \"num_unique_values\": 12673,\n        \"samples\": [\n          5500.8,\n          16.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_avg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8487.56800672954,\n        \"min\": -17348.333333333332,\n        \"max\": 290112.5666666667,\n        \"num_unique_values\": 13991,\n        \"samples\": [\n          35.419999999999995,\n          23.17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_gross\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24783.319803245013,\n        \"min\": 0.0,\n        \"max\": 870453.8999999999,\n        \"num_unique_values\": 12677,\n        \"samples\": [\n          72.77,\n          0.67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"months_since_prev_payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"next_month_payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8812.346536774332,\n        \"min\": -27146.0,\n        \"max\": 303752.89999999997,\n        \"num_unique_values\": 8768,\n        \"samples\": [\n          4657.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"will_pay_next_month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "check3 = training_data[\n",
        "    (training_data[\"mpan_mprn\"] == 10884307) &\n",
        "    (training_data[\"supplier\"] == \"Pozitive Energy\")\n",
        "]\n",
        "\n",
        "check3\n"
      ],
      "metadata": {
        "id": "LPn-g-AC7jCU",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 897
        },
        "outputId": "a82e47a8-3927-45c8-e45a-6f9241cfab37"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     mpan_mprn         supplier month_period  net_amount  gross_amount  \\\n",
              "306   10884307  Pozitive Energy   2024-02-01      129.09        129.09   \n",
              "307   10884307  Pozitive Energy   2024-03-01       90.50         90.50   \n",
              "308   10884307  Pozitive Energy   2024-04-01       57.16         57.16   \n",
              "309   10884307  Pozitive Energy   2024-05-01       50.49         50.49   \n",
              "310   10884307  Pozitive Energy   2024-06-01        8.10          8.10   \n",
              "311   10884307  Pozitive Energy   2024-07-01        0.95          0.95   \n",
              "312   10884307  Pozitive Energy   2024-08-01        1.43          1.43   \n",
              "313   10884307  Pozitive Energy   2024-09-01        0.95          0.95   \n",
              "314   10884307  Pozitive Energy   2024-10-01        6.19          6.19   \n",
              "315   10884307  Pozitive Energy   2024-11-01        1.43          1.43   \n",
              "316   10884307  Pozitive Energy   2024-12-01       26.20         26.20   \n",
              "317   10884307  Pozitive Energy   2025-01-01       50.01         50.01   \n",
              "318   10884307  Pozitive Energy   2025-02-01       64.78         64.78   \n",
              "319   10884307  Pozitive Energy   2025-03-01       85.74         85.74   \n",
              "320   10884307  Pozitive Energy   2025-04-01       68.11         68.11   \n",
              "321   10884307  Pozitive Energy   2025-05-01       34.30         40.69   \n",
              "322   10884307  Pozitive Energy   2025-06-01        0.00          0.00   \n",
              "\n",
              "     clawback_amount  num_payments contract_end_date contract_status  \\\n",
              "306             0.00           3.0        2026-11-11          active   \n",
              "307             0.00           1.0        2026-11-11          active   \n",
              "308             0.00           1.0        2026-11-11          active   \n",
              "309             0.00           1.0        2026-11-11          active   \n",
              "310             0.00           1.0        2026-11-11          active   \n",
              "311             0.00           1.0        2026-11-11          active   \n",
              "312             0.00           1.0        2026-11-11          active   \n",
              "313             0.00           1.0        2026-11-11          active   \n",
              "314             0.00           1.0        2026-11-11          active   \n",
              "315             0.00           1.0        2026-11-11          active   \n",
              "316             0.00           1.0        2026-11-11          active   \n",
              "317             0.00           1.0        2026-11-11          active   \n",
              "318             0.00           1.0        2026-11-11          active   \n",
              "319             0.00           1.0        2026-11-11          active   \n",
              "320             0.00           1.0        2026-11-11          active   \n",
              "321            -6.39           2.0        2026-11-11          active   \n",
              "322             0.00           0.0        2026-11-11          active   \n",
              "\n",
              "    Payment_Type  month_number  season  roll_3m_net  roll_3m_avg  \\\n",
              "306    Recurring             2  Winter       129.09   129.090000   \n",
              "307    Recurring             3  Spring       219.59   109.795000   \n",
              "308    Recurring             4  Spring       276.75    92.250000   \n",
              "309    Recurring             5  Spring       198.15    66.050000   \n",
              "310    Recurring             6  Summer       115.75    38.583333   \n",
              "311    Recurring             7  Summer        59.54    19.846667   \n",
              "312    Recurring             8  Summer        10.48     3.493333   \n",
              "313    Recurring             9  Autumn         3.33     1.110000   \n",
              "314    Recurring            10  Autumn         8.57     2.856667   \n",
              "315    Recurring            11  Autumn         8.57     2.856667   \n",
              "316    Recurring            12  Winter        33.82    11.273333   \n",
              "317    Recurring             1  Winter        77.64    25.880000   \n",
              "318    Recurring             2  Winter       140.99    46.996667   \n",
              "319    Recurring             3  Spring       200.53    66.843333   \n",
              "320    Recurring             4  Spring       218.63    72.876667   \n",
              "321    Recurring             5  Spring       188.15    62.716667   \n",
              "322    Recurring             6  Summer         0.00     0.000000   \n",
              "\n",
              "     roll_3m_gross  months_since_prev_payment  next_month_payment  \\\n",
              "306         129.09                        NaN               90.50   \n",
              "307         219.59               2.505600e+15               57.16   \n",
              "308         276.75               2.678400e+15               50.49   \n",
              "309         198.15               2.592000e+15                8.10   \n",
              "310         115.75               2.678400e+15                0.95   \n",
              "311          59.54               2.592000e+15                1.43   \n",
              "312          10.48               2.678400e+15                0.95   \n",
              "313           3.33               2.678400e+15                6.19   \n",
              "314           8.57               2.592000e+15                1.43   \n",
              "315           8.57               2.678400e+15               26.20   \n",
              "316          33.82               2.592000e+15               50.01   \n",
              "317          77.64               2.678400e+15               64.78   \n",
              "318         140.99               2.678400e+15               85.74   \n",
              "319         200.53               2.419200e+15               68.11   \n",
              "320         218.63               2.678400e+15               34.30   \n",
              "321         194.54               2.592000e+15                0.00   \n",
              "322         108.80               2.678400e+15                 NaN   \n",
              "\n",
              "     will_pay_next_month  \n",
              "306                    1  \n",
              "307                    1  \n",
              "308                    1  \n",
              "309                    1  \n",
              "310                    1  \n",
              "311                    1  \n",
              "312                    1  \n",
              "313                    1  \n",
              "314                    1  \n",
              "315                    1  \n",
              "316                    1  \n",
              "317                    1  \n",
              "318                    1  \n",
              "319                    1  \n",
              "320                    1  \n",
              "321                    0  \n",
              "322                    0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-03c5aae2-08e5-4917-bc5b-4d0083fe92ac\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpan_mprn</th>\n",
              "      <th>supplier</th>\n",
              "      <th>month_period</th>\n",
              "      <th>net_amount</th>\n",
              "      <th>gross_amount</th>\n",
              "      <th>clawback_amount</th>\n",
              "      <th>num_payments</th>\n",
              "      <th>contract_end_date</th>\n",
              "      <th>contract_status</th>\n",
              "      <th>Payment_Type</th>\n",
              "      <th>month_number</th>\n",
              "      <th>season</th>\n",
              "      <th>roll_3m_net</th>\n",
              "      <th>roll_3m_avg</th>\n",
              "      <th>roll_3m_gross</th>\n",
              "      <th>months_since_prev_payment</th>\n",
              "      <th>next_month_payment</th>\n",
              "      <th>will_pay_next_month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>306</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-02-01</td>\n",
              "      <td>129.09</td>\n",
              "      <td>129.09</td>\n",
              "      <td>0.00</td>\n",
              "      <td>3.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2</td>\n",
              "      <td>Winter</td>\n",
              "      <td>129.09</td>\n",
              "      <td>129.090000</td>\n",
              "      <td>129.09</td>\n",
              "      <td>NaN</td>\n",
              "      <td>90.50</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>307</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-03-01</td>\n",
              "      <td>90.50</td>\n",
              "      <td>90.50</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>3</td>\n",
              "      <td>Spring</td>\n",
              "      <td>219.59</td>\n",
              "      <td>109.795000</td>\n",
              "      <td>219.59</td>\n",
              "      <td>2.505600e+15</td>\n",
              "      <td>57.16</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>308</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-04-01</td>\n",
              "      <td>57.16</td>\n",
              "      <td>57.16</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>4</td>\n",
              "      <td>Spring</td>\n",
              "      <td>276.75</td>\n",
              "      <td>92.250000</td>\n",
              "      <td>276.75</td>\n",
              "      <td>2.678400e+15</td>\n",
              "      <td>50.49</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>309</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-05-01</td>\n",
              "      <td>50.49</td>\n",
              "      <td>50.49</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>5</td>\n",
              "      <td>Spring</td>\n",
              "      <td>198.15</td>\n",
              "      <td>66.050000</td>\n",
              "      <td>198.15</td>\n",
              "      <td>2.592000e+15</td>\n",
              "      <td>8.10</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>310</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-06-01</td>\n",
              "      <td>8.10</td>\n",
              "      <td>8.10</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>6</td>\n",
              "      <td>Summer</td>\n",
              "      <td>115.75</td>\n",
              "      <td>38.583333</td>\n",
              "      <td>115.75</td>\n",
              "      <td>2.678400e+15</td>\n",
              "      <td>0.95</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>311</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-07-01</td>\n",
              "      <td>0.95</td>\n",
              "      <td>0.95</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>7</td>\n",
              "      <td>Summer</td>\n",
              "      <td>59.54</td>\n",
              "      <td>19.846667</td>\n",
              "      <td>59.54</td>\n",
              "      <td>2.592000e+15</td>\n",
              "      <td>1.43</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>312</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-08-01</td>\n",
              "      <td>1.43</td>\n",
              "      <td>1.43</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>8</td>\n",
              "      <td>Summer</td>\n",
              "      <td>10.48</td>\n",
              "      <td>3.493333</td>\n",
              "      <td>10.48</td>\n",
              "      <td>2.678400e+15</td>\n",
              "      <td>0.95</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>313</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-09-01</td>\n",
              "      <td>0.95</td>\n",
              "      <td>0.95</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>9</td>\n",
              "      <td>Autumn</td>\n",
              "      <td>3.33</td>\n",
              "      <td>1.110000</td>\n",
              "      <td>3.33</td>\n",
              "      <td>2.678400e+15</td>\n",
              "      <td>6.19</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>314</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-10-01</td>\n",
              "      <td>6.19</td>\n",
              "      <td>6.19</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>10</td>\n",
              "      <td>Autumn</td>\n",
              "      <td>8.57</td>\n",
              "      <td>2.856667</td>\n",
              "      <td>8.57</td>\n",
              "      <td>2.592000e+15</td>\n",
              "      <td>1.43</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>315</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-11-01</td>\n",
              "      <td>1.43</td>\n",
              "      <td>1.43</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>11</td>\n",
              "      <td>Autumn</td>\n",
              "      <td>8.57</td>\n",
              "      <td>2.856667</td>\n",
              "      <td>8.57</td>\n",
              "      <td>2.678400e+15</td>\n",
              "      <td>26.20</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>316</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2024-12-01</td>\n",
              "      <td>26.20</td>\n",
              "      <td>26.20</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>12</td>\n",
              "      <td>Winter</td>\n",
              "      <td>33.82</td>\n",
              "      <td>11.273333</td>\n",
              "      <td>33.82</td>\n",
              "      <td>2.592000e+15</td>\n",
              "      <td>50.01</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>317</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2025-01-01</td>\n",
              "      <td>50.01</td>\n",
              "      <td>50.01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>1</td>\n",
              "      <td>Winter</td>\n",
              "      <td>77.64</td>\n",
              "      <td>25.880000</td>\n",
              "      <td>77.64</td>\n",
              "      <td>2.678400e+15</td>\n",
              "      <td>64.78</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>318</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2025-02-01</td>\n",
              "      <td>64.78</td>\n",
              "      <td>64.78</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>2</td>\n",
              "      <td>Winter</td>\n",
              "      <td>140.99</td>\n",
              "      <td>46.996667</td>\n",
              "      <td>140.99</td>\n",
              "      <td>2.678400e+15</td>\n",
              "      <td>85.74</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>319</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2025-03-01</td>\n",
              "      <td>85.74</td>\n",
              "      <td>85.74</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>3</td>\n",
              "      <td>Spring</td>\n",
              "      <td>200.53</td>\n",
              "      <td>66.843333</td>\n",
              "      <td>200.53</td>\n",
              "      <td>2.419200e+15</td>\n",
              "      <td>68.11</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>320</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2025-04-01</td>\n",
              "      <td>68.11</td>\n",
              "      <td>68.11</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>4</td>\n",
              "      <td>Spring</td>\n",
              "      <td>218.63</td>\n",
              "      <td>72.876667</td>\n",
              "      <td>218.63</td>\n",
              "      <td>2.678400e+15</td>\n",
              "      <td>34.30</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>321</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2025-05-01</td>\n",
              "      <td>34.30</td>\n",
              "      <td>40.69</td>\n",
              "      <td>-6.39</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>5</td>\n",
              "      <td>Spring</td>\n",
              "      <td>188.15</td>\n",
              "      <td>62.716667</td>\n",
              "      <td>194.54</td>\n",
              "      <td>2.592000e+15</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>322</th>\n",
              "      <td>10884307</td>\n",
              "      <td>Pozitive Energy</td>\n",
              "      <td>2025-06-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2026-11-11</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>6</td>\n",
              "      <td>Summer</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>108.80</td>\n",
              "      <td>2.678400e+15</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-03c5aae2-08e5-4917-bc5b-4d0083fe92ac')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-03c5aae2-08e5-4917-bc5b-4d0083fe92ac button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-03c5aae2-08e5-4917-bc5b-4d0083fe92ac');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7dd6fdbd-03c5-4271-b18a-5f083791c98e\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7dd6fdbd-03c5-4271-b18a-5f083791c98e')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7dd6fdbd-03c5-4271-b18a-5f083791c98e button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_e8abb215-c325-4d88-8736-808039b6f849\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('check3')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_e8abb215-c325-4d88-8736-808039b6f849 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('check3');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "check3",
              "summary": "{\n  \"name\": \"check3\",\n  \"rows\": 17,\n  \"fields\": [\n    {\n      \"column\": \"mpan_mprn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 10884307,\n        \"max\": 10884307,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          10884307\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"supplier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Pozitive Energy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_period\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2024-02-01 00:00:00\",\n        \"max\": \"2025-06-01 00:00:00\",\n        \"num_unique_values\": 17,\n        \"samples\": [\n          \"2024-02-01 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"net_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39.12789476229729,\n        \"min\": 0.0,\n        \"max\": 129.09,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          50.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gross_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 39.103144177403735,\n        \"min\": 0.0,\n        \"max\": 129.09,\n        \"num_unique_values\": 15,\n        \"samples\": [\n          50.01\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clawback_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.5498026439821675,\n        \"min\": -6.39,\n        \"max\": 0.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -6.39\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num_payments\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6002450479987811,\n        \"min\": 0.0,\n        \"max\": 3.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_end_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2026-11-11 00:00:00\",\n        \"max\": \"2026-11-11 00:00:00\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"2026-11-11 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"active\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Payment_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Recurring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_number\",\n      \"properties\": {\n        \"dtype\": \"int32\",\n        \"num_unique_values\": 12,\n        \"samples\": [\n          12\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Spring\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_net\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 92.99880215863631,\n        \"min\": 0.0,\n        \"max\": 276.75,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          129.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_avg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 41.01166785246425,\n        \"min\": 0.0,\n        \"max\": 129.09,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          129.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_gross\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 88.83819804350856,\n        \"min\": 3.33,\n        \"max\": 276.75,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          129.09\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"months_since_prev_payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 76469287952746.1,\n        \"min\": 2419200000000000.0,\n        \"max\": 2678400000000000.0,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2678400000000000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"next_month_payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32.67191717158126,\n        \"min\": 0.0,\n        \"max\": 90.5,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          64.78\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"will_pay_next_month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 127
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "R5TCbTAoQmV-"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Forecasting Script : preparing the date for forecasting"
      ],
      "metadata": {
        "id": "cw2wx6msYwLG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "\n",
        "# Start with a copy\n",
        "base_data = training_data.copy()\n",
        "\n",
        "# STEP 1: Clean and standardize month_period\n",
        "if isinstance(base_data[\"month_period\"].iloc[0], pd.Period):\n",
        "    base_data[\"month_period\"] = base_data[\"month_period\"].dt.to_timestamp()\n",
        "else:\n",
        "    base_data[\"month_period\"] = pd.to_datetime(base_data[\"month_period\"], errors=\"coerce\")\n",
        "\n",
        "# Drop rows with invalid month_period\n",
        "base_data = base_data.dropna(subset=[\"month_period\"])\n",
        "\n",
        "# STEP 2: Only extend rows for active contracts (but don't remove others)\n",
        "active_contracts = base_data[base_data[\"contract_status\"].str.lower() == \"active\"]\n",
        "\n",
        "# STEP 3: Get existing (mpan, supplier, month) combos to avoid duplicates\n",
        "existing_mpan_months = set(zip(\n",
        "    base_data[\"mpan_mprn\"],\n",
        "    base_data[\"supplier\"],\n",
        "    base_data[\"month_period\"].dt.to_period(\"M\")\n",
        "))\n",
        "\n",
        "# STEP 4: Create new rows up to contract_end_date\n",
        "future_rows = []\n",
        "\n",
        "for _, row in active_contracts.iterrows():\n",
        "    mpan = row[\"mpan_mprn\"]\n",
        "    supplier = row[\"supplier\"]\n",
        "    start = row[\"month_period\"] + pd.DateOffset(months=1)\n",
        "    end = pd.to_datetime(row[\"contract_end_date\"]).replace(day=1)\n",
        "    forecast_months = pd.date_range(start=start, end=end, freq=\"MS\")\n",
        "\n",
        "    for date in forecast_months:\n",
        "        period = date.to_period(\"M\")\n",
        "        if (mpan, supplier, period) in existing_mpan_months:\n",
        "            continue  # Skip existing month for this supplier\n",
        "\n",
        "        new_row = {\n",
        "            \"mpan_mprn\": mpan,\n",
        "            \"supplier\": supplier,\n",
        "            \"month_period\": date,\n",
        "            \"month_number\": date.month,\n",
        "            \"season\": (\n",
        "                \"winter\" if date.month in [12, 1, 2] else\n",
        "                \"spring\" if date.month in [3, 4, 5] else\n",
        "                \"summer\" if date.month in [6, 7, 8] else\n",
        "                \"autumn\"\n",
        "            ),\n",
        "            \"roll_3m_net\": 0.0,\n",
        "            \"roll_3m_avg\": 0.0,\n",
        "            \"roll_3m_gross\": 0.0,\n",
        "            \"months_since_prev_payment\": 1.0,\n",
        "            \"contract_status\": row[\"contract_status\"],\n",
        "            \"contract_end_date\": row[\"contract_end_date\"],\n",
        "            \"Payment_Type\": row[\"Payment_Type\"]\n",
        "        }\n",
        "        future_rows.append(new_row)\n",
        "\n",
        "# STEP 5: Combine base and extended data\n",
        "forecast_extension_df = pd.DataFrame(future_rows)\n",
        "forecast_data = pd.concat([base_data, forecast_extension_df], ignore_index=True)\n",
        "\n",
        "# STEP 6: Format month_period as YYYY-MM string\n",
        "forecast_data[\"month_period\"] = pd.to_datetime(forecast_data[\"month_period\"], errors=\"coerce\")\n",
        "forecast_data = forecast_data.dropna(subset=[\"month_period\"])\n",
        "forecast_data[\"month_period\"] = forecast_data[\"month_period\"].dt.to_period(\"M\").astype(str)\n",
        "\n",
        "# STEP 7: Drop duplicates using mpan + supplier + month\n",
        "forecast_data.reset_index(drop=True, inplace=True)\n",
        "forecast_data = forecast_data.drop_duplicates(subset=[\"mpan_mprn\", \"supplier\", \"month_period\"])\n",
        "\n",
        "# Final result\n",
        "forecast_data\n"
      ],
      "metadata": {
        "id": "A5qP-B3h2MV4",
        "outputId": "c22362d7-0418-43d4-ab3e-96f82ff6d830",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            mpan_mprn       supplier month_period  net_amount  gross_amount  \\\n",
              "0             1848605            EDF      2024-05      208.61        208.61   \n",
              "1             1848605            EDF      2024-06        0.00          0.00   \n",
              "2             1848605            EDF      2024-07        0.00          0.00   \n",
              "3             1848605            EDF      2024-08        0.00          0.00   \n",
              "4             1848605            EDF      2024-09        0.00          0.00   \n",
              "...               ...            ...          ...         ...           ...   \n",
              "206683  2700010000000  Tomato Energy      2026-06         NaN           NaN   \n",
              "206684  2700010000000  Tomato Energy      2026-07         NaN           NaN   \n",
              "206685  2700010000000  Tomato Energy      2026-08         NaN           NaN   \n",
              "206686  2700010000000  Tomato Energy      2026-09         NaN           NaN   \n",
              "206687  2700010000000  Tomato Energy      2026-10         NaN           NaN   \n",
              "\n",
              "        clawback_amount  num_payments contract_end_date contract_status  \\\n",
              "0                   0.0           1.0        2025-02-05        inactive   \n",
              "1                   0.0           0.0        2025-02-05        inactive   \n",
              "2                   0.0           0.0        2025-02-05        inactive   \n",
              "3                   0.0           0.0        2025-02-05        inactive   \n",
              "4                   0.0           0.0        2025-02-05        inactive   \n",
              "...                 ...           ...               ...             ...   \n",
              "206683              NaN           NaN        2026-10-19          active   \n",
              "206684              NaN           NaN        2026-10-19          active   \n",
              "206685              NaN           NaN        2026-10-19          active   \n",
              "206686              NaN           NaN        2026-10-19          active   \n",
              "206687              NaN           NaN        2026-10-19          active   \n",
              "\n",
              "       Payment_Type  month_number  season  roll_3m_net  roll_3m_avg  \\\n",
              "0           Upfront             5  Spring       208.61   208.610000   \n",
              "1           Upfront             6  Summer       208.61   104.305000   \n",
              "2           Upfront             7  Summer       208.61    69.536667   \n",
              "3           Upfront             8  Summer         0.00     0.000000   \n",
              "4           Upfront             9  Autumn         0.00     0.000000   \n",
              "...             ...           ...     ...          ...          ...   \n",
              "206683    Recurring             6  summer         0.00     0.000000   \n",
              "206684    Recurring             7  summer         0.00     0.000000   \n",
              "206685    Recurring             8  summer         0.00     0.000000   \n",
              "206686    Recurring             9  autumn         0.00     0.000000   \n",
              "206687    Recurring            10  autumn         0.00     0.000000   \n",
              "\n",
              "        roll_3m_gross  months_since_prev_payment  next_month_payment  \\\n",
              "0              208.61                        NaN                 0.0   \n",
              "1              208.61                        1.0                 0.0   \n",
              "2              208.61                        1.0                 0.0   \n",
              "3                0.00                        1.0                 0.0   \n",
              "4                0.00                        1.0                 0.0   \n",
              "...               ...                        ...                 ...   \n",
              "206683           0.00                        1.0                 NaN   \n",
              "206684           0.00                        1.0                 NaN   \n",
              "206685           0.00                        1.0                 NaN   \n",
              "206686           0.00                        1.0                 NaN   \n",
              "206687           0.00                        1.0                 NaN   \n",
              "\n",
              "        will_pay_next_month  \n",
              "0                       0.0  \n",
              "1                       0.0  \n",
              "2                       0.0  \n",
              "3                       0.0  \n",
              "4                       0.0  \n",
              "...                     ...  \n",
              "206683                  NaN  \n",
              "206684                  NaN  \n",
              "206685                  NaN  \n",
              "206686                  NaN  \n",
              "206687                  NaN  \n",
              "\n",
              "[33245 rows x 18 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b2756572-b362-4a58-b642-429c2edb9481\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpan_mprn</th>\n",
              "      <th>supplier</th>\n",
              "      <th>month_period</th>\n",
              "      <th>net_amount</th>\n",
              "      <th>gross_amount</th>\n",
              "      <th>clawback_amount</th>\n",
              "      <th>num_payments</th>\n",
              "      <th>contract_end_date</th>\n",
              "      <th>contract_status</th>\n",
              "      <th>Payment_Type</th>\n",
              "      <th>month_number</th>\n",
              "      <th>season</th>\n",
              "      <th>roll_3m_net</th>\n",
              "      <th>roll_3m_avg</th>\n",
              "      <th>roll_3m_gross</th>\n",
              "      <th>months_since_prev_payment</th>\n",
              "      <th>next_month_payment</th>\n",
              "      <th>will_pay_next_month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-05</td>\n",
              "      <td>208.61</td>\n",
              "      <td>208.61</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>5</td>\n",
              "      <td>Spring</td>\n",
              "      <td>208.61</td>\n",
              "      <td>208.610000</td>\n",
              "      <td>208.61</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-06</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>6</td>\n",
              "      <td>Summer</td>\n",
              "      <td>208.61</td>\n",
              "      <td>104.305000</td>\n",
              "      <td>208.61</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-07</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>7</td>\n",
              "      <td>Summer</td>\n",
              "      <td>208.61</td>\n",
              "      <td>69.536667</td>\n",
              "      <td>208.61</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-08</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>8</td>\n",
              "      <td>Summer</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-09</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>inactive</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>9</td>\n",
              "      <td>Autumn</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>206683</th>\n",
              "      <td>2700010000000</td>\n",
              "      <td>Tomato Energy</td>\n",
              "      <td>2026-06</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2026-10-19</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>6</td>\n",
              "      <td>summer</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>206684</th>\n",
              "      <td>2700010000000</td>\n",
              "      <td>Tomato Energy</td>\n",
              "      <td>2026-07</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2026-10-19</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>7</td>\n",
              "      <td>summer</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>206685</th>\n",
              "      <td>2700010000000</td>\n",
              "      <td>Tomato Energy</td>\n",
              "      <td>2026-08</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2026-10-19</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>8</td>\n",
              "      <td>summer</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>206686</th>\n",
              "      <td>2700010000000</td>\n",
              "      <td>Tomato Energy</td>\n",
              "      <td>2026-09</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2026-10-19</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>9</td>\n",
              "      <td>autumn</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>206687</th>\n",
              "      <td>2700010000000</td>\n",
              "      <td>Tomato Energy</td>\n",
              "      <td>2026-10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2026-10-19</td>\n",
              "      <td>active</td>\n",
              "      <td>Recurring</td>\n",
              "      <td>10</td>\n",
              "      <td>autumn</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>33245 rows × 18 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b2756572-b362-4a58-b642-429c2edb9481')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b2756572-b362-4a58-b642-429c2edb9481 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b2756572-b362-4a58-b642-429c2edb9481');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-198ca952-2774-4c22-90e9-f32b6cdc1bb1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-198ca952-2774-4c22-90e9-f32b6cdc1bb1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-198ca952-2774-4c22-90e9-f32b6cdc1bb1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_4e529e03-fea0-4bbf-8ac2-adf20cb21f73\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('forecast_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_4e529e03-fea0-4bbf-8ac2-adf20cb21f73 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('forecast_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "forecast_data",
              "summary": "{\n  \"name\": \"forecast_data\",\n  \"rows\": 33245,\n  \"fields\": [\n    {\n      \"column\": \"mpan_mprn\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 958470590623,\n        \"min\": 1848605,\n        \"max\": 2900000000000,\n        \"num_unique_values\": 854,\n        \"samples\": [\n          56662804,\n          8863360407,\n          1827224001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"supplier\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"EDF\",\n          \"Yu Energy\",\n          \"Scottish Power\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_period\",\n      \"properties\": {\n        \"dtype\": \"object\",\n        \"num_unique_values\": 86,\n        \"samples\": [\n          \"2028-01\",\n          \"2024-05\",\n          \"2027-08\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"net_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8748.054121352116,\n        \"min\": -27146.0,\n        \"max\": 303752.89999999997,\n        \"num_unique_values\": 9745,\n        \"samples\": [\n          42.36,\n          63.94,\n          56.81\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"gross_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8737.416498343866,\n        \"min\": 0.0,\n        \"max\": 303810.9,\n        \"num_unique_values\": 9370,\n        \"samples\": [\n          129.09,\n          567.81,\n          3119.95\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clawback_amount\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 488.87622774922346,\n        \"min\": -27146.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1141,\n        \"samples\": [\n          -3.79,\n          -19.54,\n          -62.34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"num_payments\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.3567479456384253,\n        \"min\": 0.0,\n        \"max\": 159.0,\n        \"num_unique_values\": 61,\n        \"samples\": [\n          1.0,\n          22.0,\n          29.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_end_date\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-01-31 00:00:00\",\n        \"max\": \"2028-11-25 00:00:00\",\n        \"num_unique_values\": 397,\n        \"samples\": [\n          \"2024-06-30 00:00:00\",\n          \"2027-04-24 00:00:00\",\n          \"2026-10-03 00:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"contract_status\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"active\",\n          \"inactive\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Payment_Type\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Recurring\",\n          \"Upfront\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"month_number\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3,\n        \"min\": 1,\n        \"max\": 12,\n        \"num_unique_values\": 12,\n        \"samples\": [\n          4,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"season\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 8,\n        \"samples\": [\n          \"Summer\",\n          \"autumn\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_net\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20010.719330289816,\n        \"min\": -52045.0,\n        \"max\": 870337.7000000001,\n        \"num_unique_values\": 12673,\n        \"samples\": [\n          5500.8,\n          16.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_avg\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6904.5935065951135,\n        \"min\": -17348.333333333332,\n        \"max\": 290112.5666666667,\n        \"num_unique_values\": 13991,\n        \"samples\": [\n          35.419999999999995,\n          23.17\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"roll_3m_gross\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20159.728545679616,\n        \"min\": 0.0,\n        \"max\": 870453.8999999999,\n        \"num_unique_values\": 12677,\n        \"samples\": [\n          72.77,\n          0.67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"months_since_prev_payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"next_month_payment\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8812.346536774332,\n        \"min\": -27146.0,\n        \"max\": 303752.89999999997,\n        \"num_unique_values\": 8768,\n        \"samples\": [\n          4657.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"will_pay_next_month\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.49984873601332014,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Statistical Analysis"
      ],
      "metadata": {
        "id": "rtSnqZOSJEL0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Copy original data\n",
        "df = forecast_data.copy()\n",
        "\n",
        "# Step 1: Convert date columns\n",
        "df[\"month_period\"] = pd.to_datetime(df[\"month_period\"], errors=\"coerce\")\n",
        "df[\"contract_end_date\"] = pd.to_datetime(df[\"contract_end_date\"], errors=\"coerce\")\n",
        "\n",
        "# Step 2: Define July 2025\n",
        "july_2025 = pd.to_datetime(\"2025-07-01\")\n",
        "\n",
        "# Step 3: Identify contract status\n",
        "df[\"contract_status\"] = df[\"contract_end_date\"] >= july_2025\n",
        "\n",
        "# Step 4: Recurring forecast logic (only for active, grouped by mpan & supplier)\n",
        "df_future = df[df[\"month_period\"] >= july_2025].copy()\n",
        "\n",
        "recurring = df_future[\n",
        "    (df_future[\"Payment_Type\"].str.strip().str.lower() == \"recurring\") &\n",
        "    (df_future[\"contract_status\"])\n",
        "].copy()\n",
        "\n",
        "df_past = df[df[\"month_period\"] < july_2025].copy()\n",
        "recurring_past = df_past[\n",
        "    (df_past[\"Payment_Type\"].str.strip().str.lower() == \"recurring\") &\n",
        "    (df_past[\"contract_status\"])\n",
        "]\n",
        "\n",
        "last_roll_avg = (\n",
        "    recurring_past.sort_values([\"mpan_mprn\", \"supplier\", \"month_period\"])\n",
        "    .groupby([\"mpan_mprn\", \"supplier\"])[\"roll_3m_avg\"]\n",
        "    .apply(lambda x: x[x > 0].iloc[-1] if (x > 0).any() else 0)\n",
        "    .reset_index()\n",
        "    .rename(columns={\"roll_3m_avg\": \"forecast_amount\"})\n",
        ")\n",
        "\n",
        "recurring_forecast = recurring.merge(\n",
        "    last_roll_avg, on=[\"mpan_mprn\", \"supplier\"], how=\"left\"\n",
        ")\n",
        "\n",
        "# Step 5: Upfront forecast logic (only for active, grouped by mpan & supplier)\n",
        "upfront_all = df[\n",
        "    (df[\"Payment_Type\"].str.strip().str.lower() == \"upfront\") &\n",
        "    (df[\"month_period\"] < july_2025) &\n",
        "    (df[\"contract_status\"])\n",
        "]\n",
        "\n",
        "upfront_total = (\n",
        "    upfront_all.groupby([\"mpan_mprn\", \"supplier\"])[\"net_amount\"]\n",
        "    .sum()\n",
        "    .reset_index()\n",
        "    .rename(columns={\"net_amount\": \"total_paid\"})\n",
        ")\n",
        "upfront_total[\"forecast_amount\"] = upfront_total[\"total_paid\"] * 0.2\n",
        "\n",
        "# Filter all upfront rows that are active\n",
        "upfront = df[\n",
        "    (df[\"Payment_Type\"].str.strip().str.lower() == \"upfront\") &\n",
        "    (df[\"contract_status\"])\n",
        "].copy()\n",
        "\n",
        "upfront[\"contract_ym\"] = upfront[\"contract_end_date\"].dt.to_period(\"M\")\n",
        "upfront[\"month_ym\"] = upfront[\"month_period\"].dt.to_period(\"M\")\n",
        "\n",
        "upfront_contract_month = upfront[\n",
        "    upfront[\"contract_ym\"] == upfront[\"month_ym\"]\n",
        "].merge(upfront_total, on=[\"mpan_mprn\", \"supplier\"], how=\"left\")\n",
        "\n",
        "upfront_other_months = upfront[\n",
        "    upfront[\"contract_ym\"] != upfront[\"month_ym\"]\n",
        "].copy()\n",
        "upfront_other_months[\"forecast_amount\"] = 0\n",
        "\n",
        "# Step 6: Combine forecastable rows only\n",
        "forecastable_df = pd.concat([\n",
        "    recurring_forecast,\n",
        "    upfront_contract_month,\n",
        "    upfront_other_months\n",
        "], ignore_index=True)\n",
        "\n",
        "# Step 7: Merge forecast into original full dataset (including inactive)\n",
        "df[\"forecast_amount\"] = None\n",
        "\n",
        "# Update forecast column only where applicable\n",
        "final_df = pd.concat([df, forecastable_df], ignore_index=True).drop_duplicates(\n",
        "    subset=[\"mpan_mprn\", \"supplier\", \"month_period\"], keep=\"last\"\n",
        ")\n",
        "\n",
        "final_df\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 549
        },
        "id": "unFfd3ICJDx5",
        "outputId": "91fa570a-d69b-423c-a48a-5fa091339e7f"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-11-2860992219.py:86: FutureWarning: The behavior of DataFrame concatenation with empty or all-NA entries is deprecated. In a future version, this will no longer exclude empty or all-NA columns when determining the result dtypes. To retain the old behavior, exclude the relevant entries before the concat operation.\n",
            "  final_df = pd.concat([df, forecastable_df], ignore_index=True).drop_duplicates(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           mpan_mprn                supplier month_period  net_amount  \\\n",
              "0            1848605                     EDF   2024-05-01      208.61   \n",
              "1            1848605                     EDF   2024-06-01        0.00   \n",
              "2            1848605                     EDF   2024-07-01        0.00   \n",
              "3            1848605                     EDF   2024-08-01        0.00   \n",
              "4            1848605                     EDF   2024-09-01        0.00   \n",
              "...              ...                     ...          ...         ...   \n",
              "53365  2600000000000                     EDF   2025-08-01         NaN   \n",
              "53366  2600000000000                     EDF   2025-09-01         NaN   \n",
              "53367  2600000000000                     EDF   2025-10-01         NaN   \n",
              "53368  2700000000000  Engie Gas and Electric   2025-07-01         NaN   \n",
              "53369  2700000000000  Engie Gas and Electric   2025-08-01         NaN   \n",
              "\n",
              "       gross_amount  clawback_amount  num_payments contract_end_date  \\\n",
              "0            208.61              0.0           1.0        2025-02-05   \n",
              "1              0.00              0.0           0.0        2025-02-05   \n",
              "2              0.00              0.0           0.0        2025-02-05   \n",
              "3              0.00              0.0           0.0        2025-02-05   \n",
              "4              0.00              0.0           0.0        2025-02-05   \n",
              "...             ...              ...           ...               ...   \n",
              "53365           NaN              NaN           NaN        2025-11-30   \n",
              "53366           NaN              NaN           NaN        2025-11-30   \n",
              "53367           NaN              NaN           NaN        2025-11-30   \n",
              "53368           NaN              NaN           NaN        2025-09-30   \n",
              "53369           NaN              NaN           NaN        2025-09-30   \n",
              "\n",
              "       contract_status Payment_Type  ...  roll_3m_net roll_3m_avg  \\\n",
              "0                False      Upfront  ...       208.61  208.610000   \n",
              "1                False      Upfront  ...       208.61  104.305000   \n",
              "2                False      Upfront  ...       208.61   69.536667   \n",
              "3                False      Upfront  ...         0.00    0.000000   \n",
              "4                False      Upfront  ...         0.00    0.000000   \n",
              "...                ...          ...  ...          ...         ...   \n",
              "53365             True      Upfront  ...         0.00    0.000000   \n",
              "53366             True      Upfront  ...         0.00    0.000000   \n",
              "53367             True      Upfront  ...         0.00    0.000000   \n",
              "53368             True      Upfront  ...         0.00    0.000000   \n",
              "53369             True      Upfront  ...         0.00    0.000000   \n",
              "\n",
              "       roll_3m_gross  months_since_prev_payment  next_month_payment  \\\n",
              "0             208.61                        NaN                 0.0   \n",
              "1             208.61                        1.0                 0.0   \n",
              "2             208.61                        1.0                 0.0   \n",
              "3               0.00                        1.0                 0.0   \n",
              "4               0.00                        1.0                 0.0   \n",
              "...              ...                        ...                 ...   \n",
              "53365           0.00                        1.0                 NaN   \n",
              "53366           0.00                        1.0                 NaN   \n",
              "53367           0.00                        1.0                 NaN   \n",
              "53368           0.00                        1.0                 NaN   \n",
              "53369           0.00                        1.0                 NaN   \n",
              "\n",
              "       will_pay_next_month  forecast_amount  contract_ym  month_ym total_paid  \n",
              "0                      0.0              NaN          NaT       NaT        NaN  \n",
              "1                      0.0              NaN          NaT       NaT        NaN  \n",
              "2                      0.0              NaN          NaT       NaT        NaN  \n",
              "3                      0.0              NaN          NaT       NaT        NaN  \n",
              "4                      0.0              NaN          NaT       NaT        NaN  \n",
              "...                    ...              ...          ...       ...        ...  \n",
              "53365                  NaN              0.0      2025-11   2025-08        NaN  \n",
              "53366                  NaN              0.0      2025-11   2025-09        NaN  \n",
              "53367                  NaN              0.0      2025-11   2025-10        NaN  \n",
              "53368                  NaN              0.0      2025-09   2025-07        NaN  \n",
              "53369                  NaN              0.0      2025-09   2025-08        NaN  \n",
              "\n",
              "[33245 rows x 22 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6b17e898-d8f7-4fdd-b456-cdb84533e5d8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mpan_mprn</th>\n",
              "      <th>supplier</th>\n",
              "      <th>month_period</th>\n",
              "      <th>net_amount</th>\n",
              "      <th>gross_amount</th>\n",
              "      <th>clawback_amount</th>\n",
              "      <th>num_payments</th>\n",
              "      <th>contract_end_date</th>\n",
              "      <th>contract_status</th>\n",
              "      <th>Payment_Type</th>\n",
              "      <th>...</th>\n",
              "      <th>roll_3m_net</th>\n",
              "      <th>roll_3m_avg</th>\n",
              "      <th>roll_3m_gross</th>\n",
              "      <th>months_since_prev_payment</th>\n",
              "      <th>next_month_payment</th>\n",
              "      <th>will_pay_next_month</th>\n",
              "      <th>forecast_amount</th>\n",
              "      <th>contract_ym</th>\n",
              "      <th>month_ym</th>\n",
              "      <th>total_paid</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-05-01</td>\n",
              "      <td>208.61</td>\n",
              "      <td>208.61</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>False</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>...</td>\n",
              "      <td>208.61</td>\n",
              "      <td>208.610000</td>\n",
              "      <td>208.61</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-06-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>False</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>...</td>\n",
              "      <td>208.61</td>\n",
              "      <td>104.305000</td>\n",
              "      <td>208.61</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-07-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>False</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>...</td>\n",
              "      <td>208.61</td>\n",
              "      <td>69.536667</td>\n",
              "      <td>208.61</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-08-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>False</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1848605</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2024-09-01</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-02-05</td>\n",
              "      <td>False</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53365</th>\n",
              "      <td>2600000000000</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2025-08-01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2025-11-30</td>\n",
              "      <td>True</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-11</td>\n",
              "      <td>2025-08</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53366</th>\n",
              "      <td>2600000000000</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2025-09-01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2025-11-30</td>\n",
              "      <td>True</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-11</td>\n",
              "      <td>2025-09</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53367</th>\n",
              "      <td>2600000000000</td>\n",
              "      <td>EDF</td>\n",
              "      <td>2025-10-01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2025-11-30</td>\n",
              "      <td>True</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-11</td>\n",
              "      <td>2025-10</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53368</th>\n",
              "      <td>2700000000000</td>\n",
              "      <td>Engie Gas and Electric</td>\n",
              "      <td>2025-07-01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2025-09-30</td>\n",
              "      <td>True</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-09</td>\n",
              "      <td>2025-07</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>53369</th>\n",
              "      <td>2700000000000</td>\n",
              "      <td>Engie Gas and Electric</td>\n",
              "      <td>2025-08-01</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2025-09-30</td>\n",
              "      <td>True</td>\n",
              "      <td>Upfront</td>\n",
              "      <td>...</td>\n",
              "      <td>0.00</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00</td>\n",
              "      <td>1.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2025-09</td>\n",
              "      <td>2025-08</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>33245 rows × 22 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6b17e898-d8f7-4fdd-b456-cdb84533e5d8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-6b17e898-d8f7-4fdd-b456-cdb84533e5d8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-6b17e898-d8f7-4fdd-b456-cdb84533e5d8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-29ecc8ab-da3a-447f-a778-c85f3f78b118\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-29ecc8ab-da3a-447f-a778-c85f3f78b118')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-29ecc8ab-da3a-447f-a778-c85f3f78b118 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_adff1a9a-f298-4823-b49b-2823f18d5b96\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('final_df')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_adff1a9a-f298-4823-b49b-2823f18d5b96 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('final_df');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "final_df"
            }
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "final_df.to_csv(\"final_df.csv\", index=False)\n",
        "\n",
        "from google.colab import files\n",
        "files.download(\"final_df.csv\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "id": "pU02NIT5L9vW",
        "outputId": "1d1c5154-8ada-4ef3-bbf0-1c86e384588c"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_34e20c43-b1ae-4e98-8ccb-9f4d8f012db3\", \"final_df.csv\", 4477273)"
            ]
          },
          "metadata": {}
        }
      ]
    }
  ]
}